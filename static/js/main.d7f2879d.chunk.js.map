{"version":3,"sources":["img/mars.svg","img/female.svg","img/anonymous.svg","img/call.svg","components/contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Contact","sex","this","props","gender","MALE_IMAGE","FEMALE_IMAGE","ANONYMOUS_IMAGE","genderClass","className","src","alt","firstName","lastName","phone","CALL_IMAGE","React","Component","contacts","serchableFields","App","state","search","activeGenders","undefined","handleSearchChange","event","setState","currentTarget","value","toLowerCase","filterContacts","filter","contact","some","fieldName","includes","isGenderActive","onCheckBoxChange","persist","name","target","checked","concat","placeholder","type","onChange","htmlFor","map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d7f2879d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mars.07582995.svg\";","module.exports = __webpack_public_path__ + \"static/media/female.5c87994c.svg\";","module.exports = __webpack_public_path__ + \"static/media/anonymous.71ee1719.svg\";","module.exports = __webpack_public_path__ + \"static/media/call.58b5d0bb.svg\";","import React from 'react';\r\nimport MALE_IMAGE from '../img/mars.svg';\r\nimport FEMALE_IMAGE from '../img/female.svg';\r\nimport ANONYMOUS_IMAGE from '../img/anonymous.svg'\r\nimport CALL_IMAGE from '../img/call.svg'\r\n\r\nclass Contact extends React.Component {\r\n    render() {\r\n        const sex = this.props.gender ? (this.props.gender === 'male' ? MALE_IMAGE: FEMALE_IMAGE) : ANONYMOUS_IMAGE;\r\n        const genderClass = `gender-image-container ${this.props.gender}-image-container`;\r\n        \r\n      return (\r\n        <div className='wrapper'>\r\n          <section className='section'>\r\n            <div className={genderClass}>\r\n                <img className='gender-image' src={sex} alt={this.props.gender}></img>\r\n            </div>\r\n            <div className='contact-data'>\r\n                <h3 className='contact-name'>{this.props.firstName} {this.props.lastName}</h3>\r\n                <span className='contact-number'>Мобільний: {this.props.phone}</span>\r\n                <img className='call-image' src={CALL_IMAGE} alt='call'></img>\r\n            </div>\r\n          </section>\r\n        </div>\r\n          )\r\n    }\r\n  }\r\n\r\nexport default Contact;","import React from 'react';\nimport Contact from './components/contact';\n\nconst contacts = [{\n  firstName: \"Барней\",\n  lastName: \"Стинсовський\",\n  phone: \"+380956319521\",\n  gender: \"male\"\n}, {\n  firstName: \"Робін\",\n  lastName: \"Щербатська\",\n  phone: \"+380931460123\",\n  gender: \"female\"\n}, {\n  firstName: \"Анонімний\",\n  lastName: \"Анонімус\",\n  phone: \"+380666666666\"\n}, {\n  firstName: \"Лілія\",\n  lastName: \"Олдровна\",\n  phone: \"+380504691254\",\n  gender: \"female\"\n}, {\n  firstName: \"Маршен\",\n  lastName: \"Еріксонян\",\n  phone: \"+380739432123\",\n  gender: \"male\"\n}, {\n  firstName: \"Теодор\",\n  lastName: \"Мотсбес\",\n  phone: \"+380956319521\",\n  gender: \"male\"\n}, {\n  firstName: \"Снуп\",\n  lastName: \"Дог\",\n  phone: \"+380420420420\",\n  gender: \"male\"\n}];\n\nconst serchableFields = [\"firstName\", \"lastName\", \"phone\"];  \n\nclass App extends React.Component {\n  state = {\n    search: '',\n    activeGenders: [\"male\", \"female\", undefined]\n  };\n\n  handleSearchChange = (event) =>{\n    this.setState({\n      search: event.currentTarget.value.toLowerCase()\n    });\n  }\n\n  filterContacts = () =>\n    contacts.filter((contact)=>\n      serchableFields.some((fieldName) =>\n        contact[fieldName].toLowerCase().includes(this.state.search) &&\n        this.state.activeGenders.includes(contact.gender)\n      )\n    );\n  \n  isGenderActive = (gender) =>{\n    return this.state.activeGenders.includes(gender)\n  }\n\n  onCheckBoxChange = (event) =>{\n    event.persist();\n    if(event.currentTarget.name === 'unknown'){ \n      event.target.checked ? \n      this.setState((state) => ({\n        activeGenders: state.activeGenders.concat(undefined)\n      })) :\n      this.setState({\n        activeGenders: this.state.activeGenders.filter(\n          (gender) => gender\n        )\n      });\n    } else {\n      event.target.checked ? \n      this.setState((state) => ({\n        activeGenders: state.activeGenders.concat(event.target.name)\n      })) :\n      this.setState({\n        activeGenders: this.state.activeGenders.filter(\n          (gender) => gender !== event.currentTarget.name\n        )\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"search-panel\">\n        <input placeholder='Search contacts...' className='search-input' type='text' value={this.state.search} onChange={this.handleSearchChange}></input>\n\n      <div className='checkbox-panel'>\n              <label htmlFor='male'>Male:</label>\n                <input name='male' className='checkbox' type=\"checkbox\" onChange={this.onCheckBoxChange} checked={this.isGenderActive('male')}></input>\n              <label htmlFor='female'>Female:</label>\n                <input name='female' className='checkbox' type=\"checkbox\" onChange={this.onCheckBoxChange} checked={this.isGenderActive('female')}></input>\n              <label htmlFor='unknown'>Unknown gender:</label>\n                <input name='unknown' className='checkbox' type=\"checkbox\" onChange={this.onCheckBoxChange} checked={this.isGenderActive(undefined)}></input>\n      </div>\n          {this.filterContacts().map((contact) => \n            <Contact {...contact} />)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n<App />, document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}